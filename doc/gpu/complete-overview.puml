@startuml

left to right direction
allowmixing


component "CRD resource-classes" {
  component "resource-class0" {
      component "CRD resource-class0-parameters"
  }
  component "resource-class1" {
      component "CRD resource-class1-parameters"
  }
}

component "CRD nodeallocationstats" as crdnas {
    cloud "node0" as nasnode0 {
      component "allocatable GPUs" as allocatable
      component "claim-requests" as requests
      component "claim-allocations" as allocations
    }
}

node "control-plane" as cp {
  component "Scheduler / DRA-controller" as scheduler
  component "R-D controller" as rdcontroller
  component "API" as api
}

node "node0" as wn {
  component "Pod" as pod
  component "R-D kubelet-plugin" as rdplugin
}

component "resourceclaim0\n\nresource-class0\nparametersRef:" as resclaim0 {
  component resclaimparams0 [
type: gpu,
memory: 256,
millicores: 100
]
}

package "Pod.yaml" as podyaml {
}

package "ResourceClaim.yaml" as resclaimyaml {
}

podyaml ..> api : deploy
resclaimyaml ..> api : deploy

cloud "Schedule Pod" as schedulepod {
}

api ..> schedulepod 
schedulepod ..> scheduler
rdplugin --> allocatable : 0. populate & sync with CDI/CRD
api --> resclaim0 : 1. create
resclaim0 --> rdcontroller : 2. notify
rdcontroller --> requests : 3. create
rdcontroller --> requests : 3. create
crdnas --> rdplugin : 4. allocate and update
 
scheduler <=> rdcontroller : unsuitableNodes
rdcontroller --> nasnode0 : enough resources?

@enduml
