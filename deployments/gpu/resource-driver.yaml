---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: intel-gpu-resource-driver-kubelet-plugin
  namespace: intel-gpu-resource-driver
  labels:
    app: intel-gpu-resource-driver-kubelet-plugin
spec:
  selector:
    matchLabels:
      app: intel-gpu-resource-driver-kubelet-plugin
  template:
    metadata:
      labels:
        app: intel-gpu-resource-driver-kubelet-plugin
    spec:
      serviceAccount: intel-gpu-resource-driver-service-account
      serviceAccountName: intel-gpu-resource-driver-service-account
      initContainers:
      - name: init
        image: intel/intel-gpu-resource-driver:v0.5.0
        imagePullPolicy: IfNotPresent
        command: ["/kubelet-gpu-plugin", "--status", "NotReady"]
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          capabilities:
            drop: [ "ALL" ]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          seccompProfile:
            type: RuntimeDefault
      containers:
      - name: kubelet-plugin
        image: intel/intel-gpu-resource-driver:v0.5.0
        imagePullPolicy: IfNotPresent
        command: ["/kubelet-gpu-plugin"]
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SYSFS_ROOT
          value: "/sysfs"
        # Use this to tell kubelet-plugin where the DRI devices nodes should be.
        # This will be prefix for CDI devices, runtime will try to mount devices
        # with this prefix into workloads.
        #- name: DEV_DRI_PATH
        #  value: "/fake/dri"
        volumeMounts:
        - name: plugins-registry
          mountPath: /var/lib/kubelet/plugins_registry
        - name: plugins
          mountPath: /var/lib/kubelet/plugins
        - name: cdi
          mountPath: /etc/cdi
        - name: varruncdi
          mountPath: /var/run/cdi
        - name: defaults
          mountPath: "/defaults"
          readOnly: true
        - name: sysfs
          mountPath: "/sysfs"
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          capabilities:
            drop: [ "ALL" ]
          readOnlyRootFilesystem: true
          runAsUser: 0
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: plugins-registry
        hostPath:
          path: /var/lib/kubelet/plugins_registry
      - name: plugins
        hostPath:
          path: /var/lib/kubelet/plugins
      - name: cdi
        hostPath:
          path: /etc/cdi
      - name: varruncdi
        hostPath:
          path: /var/run/cdi
      - name: sysfs
        hostPath:
          path: /sys
      - name: defaults
        configMap:
          name: defaults
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: intel-gpu-resource-driver-controller
  namespace: intel-gpu-resource-driver
  labels:
    app: intel-gpu-resource-driver-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: intel-gpu-resource-driver-controller
  template:
    metadata:
      labels:
        app: intel-gpu-resource-driver-controller
    spec:
      serviceAccount: intel-gpu-resource-driver-service-account
      serviceAccountName: intel-gpu-resource-driver-service-account
      containers:
      - name: controller
        image: intel/intel-gpu-resource-driver:v0.5.0
        imagePullPolicy: IfNotPresent
        command: ["/gpu-controller"]
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          capabilities:
            drop: [ "ALL" ]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          seccompProfile:
            type: RuntimeDefault
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: intel-gpu-resource-driver-service-account
  namespace: intel-gpu-resource-driver

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: intel-gpu-resource-driver-role
  namespace: intel-gpu-resource-driver
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "events"]
  verbs: ["get", "list", "create", "watch", "patch"]
- apiGroups: ["resource.k8s.io"]
  resources: ["resourceclaims", "resourceclaimparameters", "resourceclasses", "podschedulings","resourceclaims/status", "podschedulings/status", "podschedulingcontexts", "podschedulingcontexts/status"]
  verbs: ["create", "get", "update", "list", "watch", "patch"]
- apiGroups: ["gpu.resource.intel.com"]
  resources: ["*"]
  verbs: ["*"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: intel-gpu-resource-driver-role-binding
  namespace: intel-gpu-resource-driver
subjects:
- kind: ServiceAccount
  name: intel-gpu-resource-driver-service-account
  namespace: intel-gpu-resource-driver
roleRef:
  kind: ClusterRole
  name: intel-gpu-resource-driver-role
  apiGroup: rbac.authorization.k8s.io
